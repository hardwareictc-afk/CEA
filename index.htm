<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Launch the National Air Quality Network - CEA</title>
	<meta name="generator" content="Gadash, using Claude AI">
	<meta name="description" content="Air Quality Launch Button Interface">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            height: 100vh;
            overflow: hidden;
			background: linear-gradient(135deg, #3CB371 0%, #5A9FD4 50%, #40E0D0 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }

        .matrix-rain {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .matrix-word {
            position: absolute;
            font-family: 'Segoe UI', sans-serif;
            font-weight: 700;
            white-space: nowrap;
            animation: fall linear infinite;
        }

        @keyframes fall {
            0% { transform: translateY(-50px); opacity: 0; }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { transform: translateY(calc(100vh + 50px)); opacity: 0; }
        }

        .launch-container {
            z-index: 10;
            text-align: center;
            position: relative;
        }

        .launch-button {
            width: 40vw;
            height: 35vh;
            min-width: 300px;
            min-height: 200px;
            background: linear-gradient(45deg, #32CD32, #FFD700, #FF8C00, #4682B4);
            background-size: 300% 300%;
            border: none;
            border-radius: 25px;
            font-family: 'Segoe UI', sans-serif;
            font-size: clamp(1.2rem, 3.5vw, 2.5rem);
            font-weight: 700;
            color: white;
            text-shadow: 4px 4px 8px rgba(0,0,0,0.8);
            cursor: pointer;
            transition: all 0.3s ease;
            animation: gradientShift 3s ease-in-out infinite;
            position: relative;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

body, * {
    cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="72" height="60" viewBox="0 0 12 12"><path d="M1 1l4 10 2-4 4-2z" fill="white" stroke="black" stroke-width="1"/></svg>') 12 4, auto;
}

.launch-button {
    cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="82" height="66" viewBox="0 0 12 12"><path d="M1 1l4 10 2-4 4-2z" fill="yellow" stroke="black" stroke-width="1.2"/></svg>') 15 5, auto;
}

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .launch-button:hover {
            transform: scale(1.1);
            box-shadow: 0 15px 40px rgba(0,0,0,0.4);
        }

        .launch-button:active {
            transform: scale(0.95);
        }

        .launch-button.countdown {
            animation: pulse 1.2s ease-in-out infinite, gradientShift 3s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { 
                transform: scale(1) translateZ(0px);
                box-shadow: 
                    0 15px 30px rgba(0,0,0,0.4),
                    0 8px 16px rgba(0,0,0,0.3),
                    inset 0 6px 12px rgba(255,255,255,0.3),
                    inset 0 -6px 12px rgba(0,0,0,0.3);
            }
            50% { 
                transform: scale(1.02) translateZ(5px);
                box-shadow: 
                    0 20px 35px rgba(0,0,0,0.5),
                    0 12px 20px rgba(0,0,0,0.4),
                    inset 0 8px 16px rgba(255,255,255,0.4),
                    inset 0 -8px 16px rgba(0,0,0,0.4);
            }
        }

        .launch-button.launching {
            animation: glitch 0.5s ease-in-out infinite, gradientShift 3s ease-in-out infinite;
            background: linear-gradient(45deg, #FF4500, #FF6347, #FFD700, #32CD32);
        }

        @keyframes glitch {
            0%, 100% { 
                transform: translateX(0) translateZ(0px); 
                filter: hue-rotate(0deg);
            }
            20% { 
                transform: translateX(-3px) translateZ(4px); 
                filter: hue-rotate(90deg);
            }
            40% { 
                transform: translateX(3px) translateZ(-4px); 
                filter: hue-rotate(180deg);
            }
            60% { 
                transform: translateX(-2px) translateZ(6px); 
                filter: hue-rotate(270deg);
            }
            80% { 
                transform: translateX(2px) translateZ(-2px); 
                filter: hue-rotate(360deg);
            }
        }

        .button-text {
            position: relative;
            z-index: 2;
            line-height: 1.3;
        }

        .button-text .launch-word {
            font-size: 1.2em;
        }

        .button-text .subtitle {
            font-size: 0.7em;
            display: block;
        }

        .glitch-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 255, 65, 0.1);
            opacity: 0;
            pointer-events: none;
            z-index: 1;
        }

        .launch-button.launching .glitch-overlay {
            opacity: 1;
            animation: glitchFlash 0.1s ease-in-out infinite;
        }

        @keyframes glitchFlash {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.3; }
        }

        .matrix-rain.intense .matrix-word {
            animation-duration: 0.2s;
        }

        .fade-out {
            animation: fadeOut 2s ease-out forwards;
        }

        @keyframes fadeOut {
            0% { opacity: 1; }
            100% { opacity: 0; }
        }

        @media (max-width: 768px) {
            .launch-button {
                width: 80vw;
                height: 30vh;
                font-size: clamp(1rem, 4vw, 2rem);
            }
        }
    </style>
</head>
<body>
    <div class="matrix-rain" id="matrixRain"></div>
    
    <div class="launch-container">
        <button class="launch-button" id="launchButton">
            <div class="glitch-overlay"></div>
            <span class="button-text" id="buttonText">Click to Launch <br> <small>the National Air Quality Network</small></span>
        </button>
    </div>

    <script>
        class LaunchSequence {
            constructor() {
                this.button = document.getElementById('launchButton');
                this.buttonText = document.getElementById('buttonText');
                this.matrixRain = document.getElementById('matrixRain');
                this.countdown = 5;
                this.isSequenceStarted = false;
                this.wordInterval = null;
                this.audioContext = null;
                this.backgroundOscillators = [];
                
                // Code for word weight
                this.words = {
                    ' AQI': 4.0,
					'Air Quality': 2.0,
					' Haze': 3.0,
					' Fog ': 1.0,
					' Smoke': 2.0,
					' Dust': 2.0,
					'  CEA  ': 1.0,
					' Smog': 2.2,
                    'AQI-SL': 2.0,
                    ' Data': 2.0,
					' info': 2.0,
                    'Pollution': 2.0,
                    'PM₂.₅': 4.0,
                    'PM₁₀ ': 2.0,
					'PM₁  ': 1.0,
                    ' O₃ ': 3.0,
                    'CO   ': 3.0,
                    'NO₂  ': 2.0,
                    'NO   ': 1.0,
                    ' NOx ': 1.0,
                    'SO₂  ': 3.0,
                    ' CO₂ ': 2.0,
                    ' VOC ': 2.0,
                    '  HC ': 1.0,
					'Weather': 2.0,
                    'Temperature': 1.0,
                    ' Humidity': 1.0,
                    ' Pressure': 1.0,
                    'SolarRadiation': 1.0,
                    'Rain Fall': 1.0,
					'Wind Speed': 1.0,
                    'Wind Direction': 1.0
                };
                
                // Code for color weight
                this.colors = {
                    '#000000': 2.0,  // Black
                    '#505560': 1.0,  // Dark gray
                    '#0044CC': 1.0,  // Bright blue
                    '#DD6600': 1.0,  // Bright brown/orange
                    '#009900': 1.0,  // Bright green
					'#FF00CC': 1.0,  // Magenta
                    '#CC0000': 1.0   // Bright red
                };
                
                this.initMatrixRain();
                this.bindEvents();
            }

            getRandomWord() {
                const totalWeight = Object.values(this.words).reduce((sum, weight) => sum + weight, 0);
                let random = Math.random() * totalWeight;
                
                for (const [word, weight] of Object.entries(this.words)) {
                    random -= weight;
                    if (random <= 0) {
                        return word;
                    }
                }
                return Object.keys(this.words)[0];
            }

            getRandomColor() {
                const totalWeight = Object.values(this.colors).reduce((sum, weight) => sum + weight, 0);
                let random = Math.random() * totalWeight;
                
                for (const [color, weight] of Object.entries(this.colors)) {
                    random -= weight;
                    if (random <= 0) {
                        return color;
                    }
                }
                return Object.keys(this.colors)[0];
            }

            createFallingWord() {
                const word = document.createElement('div');
                word.className = 'matrix-word';
                const selectedWord = this.getRandomWord();
                word.textContent = selectedWord;
                word.style.left = Math.random() * (window.innerWidth - 150) + 'px';
                word.style.color = this.getRandomColor();
                
                const baseSize = 22;
                const wordLength = selectedWord.length;
                
                let sizeMultiplier;
                if (wordLength <= 3) {
                    sizeMultiplier = 2 + (Math.random() * 3);
                } else if (wordLength <= 7) {
                    sizeMultiplier = 1 + (Math.random() * 1);
                } else {
                    sizeMultiplier = 0.8 + (Math.random() * 0.4);
                }
                
                word.style.fontSize = (baseSize * sizeMultiplier) + 'px';
                
                const duration = Math.random() * 4 + 4;
                word.style.animationDuration = duration + 's';
                
                this.matrixRain.appendChild(word);
                
                setTimeout(() => {
                    if (word.parentNode) {
                        this.matrixRain.removeChild(word);
                    }
                }, duration * 1000);
            }

            initMatrixRain() {
                this.wordInterval = setInterval(() => {
                    this.createFallingWord();
                }, 100);
            }

            bindEvents() {
                this.button.addEventListener('click', () => {
                    if (!this.isSequenceStarted) {
                        this.startCompleteSequence();
                    }
                });
            }

            async initAudio() {
                try {
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    
                    if (this.audioContext.state === 'suspended') {
                        await this.audioContext.resume();
                    }
                    
                    // Start background audio immediately
                    this.startBackgroundAudio();
                } catch (e) {
                    console.log('Audio initialization failed:', e);
                }
            }

            startBackgroundAudio() {
                if (!this.audioContext) return;
                
                try {
                    const frequencies = [55, 82.5, 110, 165];
                    
                    frequencies.forEach((freq, index) => {
                        const oscillator = this.audioContext.createOscillator();
                        const gainNode = this.audioContext.createGain();
                        const filterNode = this.audioContext.createBiquadFilter();
                        
                        filterNode.type = 'lowpass';
                        filterNode.frequency.setValueAtTime(freq * 2, this.audioContext.currentTime);
                        
                        oscillator.connect(filterNode);
                        filterNode.connect(gainNode);
                        gainNode.connect(this.audioContext.destination);
                        
                        oscillator.type = 'sine';
                        oscillator.frequency.setValueAtTime(freq, this.audioContext.currentTime);
                        gainNode.gain.setValueAtTime(0.03 + (index * 0.008), this.audioContext.currentTime);
                        
                        const lfo = this.audioContext.createOscillator();
                        const lfoGain = this.audioContext.createGain();
                        lfo.frequency.setValueAtTime(0.1 + (index * 0.05), this.audioContext.currentTime);
                        lfoGain.gain.setValueAtTime(0.5, this.audioContext.currentTime);
                        lfo.connect(lfoGain);
                        lfoGain.connect(oscillator.frequency);
                        
                        oscillator.start();
                        lfo.start();
                        
                        this.backgroundOscillators.push({ oscillator, gainNode, lfo });
                    });
                } catch (e) {
                    console.log('Background audio failed:', e);
                }
            }

            async startCompleteSequence() {
                if (this.isSequenceStarted) return;
                this.isSequenceStarted = true;
                
                // Initialize audio first
                await this.initAudio();
                
                // Start countdown immediately
                this.startCountdown();
                
                // Schedule automatic launch after countdown + 2 second delay
                setTimeout(() => {
                    this.startLaunch();
                }, 5 * 1200 + 2000); // 5 countdown beeps + 2 second delay
            }

            startCountdown() {
                this.button.classList.add('countdown');
                this.countdown = 5;
                
                const countdownInterval = setInterval(() => {
                    if (this.countdown > 0) {
                        this.buttonText.innerHTML = `Launching in ${this.countdown}`;
                        this.playBeep();
                        this.countdown--;
                    } else {
                        clearInterval(countdownInterval);
                        this.buttonText.innerHTML = '<span class="launch-word">Launching</span><br><span class="subtitle">the National Air Quality Network</span>';
                        this.button.classList.remove('countdown');
                        this.playFinalBeep();
                    }
                }, 1200);
            }

            startLaunch() {
                this.button.classList.add('launching');
                this.buttonText.textContent = 'Launching...';
                this.matrixRain.classList.add('intense');
                
                // Increase word creation rate during launch
                clearInterval(this.wordInterval);
                this.wordInterval = setInterval(() => {
                    this.createFallingWord();
                }, 25);
                
                this.playLaunchSound();
                
                setTimeout(() => {
                    this.matrixRain.classList.add('fade-out');
                    document.body.classList.add('fade-out');
                }, 4000);
                
                setTimeout(() => {
                    window.location.href = 'https://www.aq.cea.lk';
                }, 7500);
            }

            playBeep() {
                if (!this.audioContext) return;
                
                try {
                    const oscillator = this.audioContext.createOscillator();
                    const gainNode = this.audioContext.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(this.audioContext.destination);
                    
                    oscillator.frequency.setValueAtTime(650, this.audioContext.currentTime);
                    gainNode.gain.setValueAtTime(0.25, this.audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.7);
                    
                    oscillator.start(this.audioContext.currentTime);
                    oscillator.stop(this.audioContext.currentTime + 0.7);
                } catch (e) {
                    console.log('Beep failed:', e);
                }
            }

            playFinalBeep() {
                if (!this.audioContext) return;
                
                try {
                    const oscillator = this.audioContext.createOscillator();
                    const gainNode = this.audioContext.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(this.audioContext.destination);
                    
                    oscillator.frequency.setValueAtTime(950, this.audioContext.currentTime);
                    gainNode.gain.setValueAtTime(0.35, this.audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 1.2);
                    
                    oscillator.start(this.audioContext.currentTime);
                    oscillator.stop(this.audioContext.currentTime + 1.2);
                } catch (e) {
                    console.log('Final beep failed:', e);
                }
            }

            playLaunchSound() {
                if (!this.audioContext) return;
                
                try {
                    // Multi-tone ascending launch sequence
                    for (let i = 0; i < 8; i++) {
                        setTimeout(() => {
                            const oscillator = this.audioContext.createOscillator();
                            const gainNode = this.audioContext.createGain();
                            
                            oscillator.connect(gainNode);
                            gainNode.connect(this.audioContext.destination);
                            
                            oscillator.frequency.setValueAtTime(400 + (i * 150), this.audioContext.currentTime);
                            gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
                            gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.9);
                            
                            oscillator.start(this.audioContext.currentTime);
                            oscillator.stop(this.audioContext.currentTime + 0.9);
                        }, i * 200);
                    }
                    
                    // Sustained background tone
                    setTimeout(() => {
                        const oscillator = this.audioContext.createOscillator();
                        const gainNode = this.audioContext.createGain();
                        
                        oscillator.connect(gainNode);
                        gainNode.connect(this.audioContext.destination);
                        
                        oscillator.frequency.setValueAtTime(300, this.audioContext.currentTime);
                        gainNode.gain.setValueAtTime(0.2, this.audioContext.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 4.0);
                        
                        oscillator.start(this.audioContext.currentTime);
                        oscillator.stop(this.audioContext.currentTime + 4.0);
                    }, 500);
                } catch (e) {
                    console.log('Launch sound failed:', e);
                }
            }
        }

        // Initialize the launch sequence when the page loads
        window.addEventListener('DOMContentLoaded', () => {
            new LaunchSequence();
        });
    </script>
</body>
</html>